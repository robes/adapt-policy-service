package edu.isi.policy

import org.apache.log4j.Logger;
import edu.isi.policy.entity.Transfer;
import edu.isi.policy.util.TransferList;
import edu.isi.policy.entity.ResourceExpressionPair;

import java.util.Collections;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.List;
import java.net.URI;

import edu.isi.policy.adapt.ResourceAllocationLog;
import edu.isi.policy.adapt.ResourceAllocation;
import edu.isi.policy.adapt.ResourceAllocationImpl;
import edu.isi.policy.util.TransferStatisticsLog;

global Logger logger;
global TransferStatisticsLog transferStatisticsLog;
global ResourceAllocationLog resourceAllocationLog;
global Map maxParallelStreams;
global Map maxBandwidth;

global Integer default_max_streams;
global Float default_max_rate;

declare AggregatedRate
  sourceHost: String
  destinationHost: String
  rate: Float
end

declare AggregatedStreams
  sourceHost: String
  destinationHost: String
  streams: Integer
end

declare TotalTransfers
  sourceHost: String
  destinationHost: String
  transfers: Integer
end

rule "Create ResourceAllocation object for third-party transfer"
when
  $t: Transfer($id:id, source.getScheme() != "file", destination.getScheme() != "file", $source:source, $destination: destination)
  not ResourceAllocation(id == $id)
then
  ResourceAllocation $ra = new ResourceAllocationImpl($id, $source, $destination, 0, 0.0f);
  insert($ra);
  logger.debug("Created ResourceAllocation object for third-party transfer: " + $ra);
  resourceAllocationLog.addResourceAllocation($ra);
  logger.debug("Added resource allocation " + $id + " to resource allocation log.");
end

rule "Create ResourceAllocation object for two-party download"
when
  $t: Transfer($id:id, source.getScheme() != "file", destination.getScheme() == "file", $source: source, $destination: destination, $destination_host: properties["local_file_host"])
  not ResourceAllocation(id == $id)
then
  ResourceAllocation $ra = new ResourceAllocationImpl($id, $source, new URI("file://" + $destination_host + $destination.getPath()), 0, 0.0f);
  insert($ra);
  logger.debug("Created ResourceAllocation object for two party download: " + $ra);
  resourceAllocationLog.addResourceAllocation($ra);
  logger.debug("Added resource allocation " + $id + " to resource allocation log.");
end


rule "Create ResourceAllocation object for two-party upload"
when
  $t: Transfer($id:id, source.getScheme() == "file", destination.getScheme() != "file", $source:source, $source_host:properties["local_file_host"], $destination:destination)
  not ResourceAllocation(id == $id)
then
  ResourceAllocation $ra = new ResourceAllocationImpl($id, new URI("file://" + $source_host + $source.getPath()), $destination, 0, 0.0f);
  insert($ra);
  logger.debug("Created ResourceAllocation object for two party upload: " + $ra);
  resourceAllocationLog.addResourceAllocation($ra);
  logger.debug("Added resource allocation " + $id + " to resource allocation log.");
end

rule "Retrieve new aggregated streams for third-party transfer"
no-loop
salience 1000
when
  Transfer(properties["max_streams"] == null, source.getScheme() != "file", destination.getScheme() != "file", $sourceHost:source.getHost(), $destinationHost: destination.getHost())
  not AggregatedStreams(sourceHost == $sourceHost, destinationHost == $destinationHost)
then
  AggregatedStreams $a = new AggregatedStreams();
  $a.setSourceHost($sourceHost);
  $a.setDestinationHost($destinationHost);
  $a.setStreams(resourceAllocationLog.getAggregatedTransferStreams($sourceHost, $destinationHost));
  insert($a);
  logger.debug("Retrieved aggregated streams: " + $a);
end

rule "Retrieve new aggregated streams for two-party download"
no-loop
salience 1000
when
  Transfer(properties["max_streams"] == null, source.getScheme() != "file", destination.getScheme() == "file", $sourceHost:source.getHost(), properties["local_file_host"] != null, $destinationHost: properties["local_file_host"].toString())
  not AggregatedStreams(sourceHost == $sourceHost, destinationHost == $destinationHost)
then
  AggregatedStreams $a = new AggregatedStreams();
  $a.setSourceHost($sourceHost);
  $a.setDestinationHost($destinationHost);
  $a.setStreams(resourceAllocationLog.getAggregatedTransferStreams($sourceHost, $destinationHost));
  insert($a);
  logger.debug("Retrieved aggregated streams: " + $a);
end

rule "Retrieve new aggregated streams for two-party upload"
no-loop
salience 1000
when
  Transfer(properties["max_streams"] == null, source.getScheme() == "file", destination.getScheme() != "file", properties["local_file_host"] != null, $sourceHost:properties["local_file_host"].toString(), $destinationHost: destination.getHost())
  not AggregatedStreams(sourceHost == $sourceHost.toString(), destinationHost == $destinationHost)
then
  AggregatedStreams $a = new AggregatedStreams();
  $a.setSourceHost($sourceHost);
  $a.setDestinationHost($destinationHost);
  $a.setStreams(resourceAllocationLog.getAggregatedTransferStreams($sourceHost, $destinationHost));
  insert($a);
  logger.debug("Retrieved aggregated streams: " + $a);
end

rule "Retrieve new aggregated rate for third-party transfer"
no-loop
salience 1000
when
  Transfer(properties["max_rate"] == null, source.getScheme() != "file", destination.getScheme() != "file", $sourceHost:source.getHost(), $destinationHost: destination.getHost())
  not AggregatedStreams(sourceHost == $sourceHost, destinationHost == $destinationHost)
then
  AggregatedRate $a = new AggregatedRate();
  $a.setSourceHost($sourceHost);
  $a.setDestinationHost($destinationHost);
  $a.setRate(resourceAllocationLog.getAggregatedRate($sourceHost, $destinationHost));
  insert($a);
  logger.debug("Retrieved aggregated rate: " + $a);
end

rule "Retrieve new aggregated rate for two-party download"
no-loop
salience 1000
when
  Transfer(properties["max_rate"] == null, source.getScheme() != "file", destination.getScheme() == "file", $sourceHost:source.getHost(), properties["local_file_host"] != null, $destinationHost: properties["local_file_host"].toString())
  not AggregatedRate(sourceHost == $sourceHost, destinationHost == $destinationHost)
then
  AggregatedRate $a = new AggregatedRate();
  $a.setSourceHost($sourceHost);
  $a.setDestinationHost($destinationHost);
  $a.setRate(resourceAllocationLog.getAggregatedRate($sourceHost, $destinationHost));
  insert($a);
  logger.debug("Retrieved aggregated rate: " + $a);
end

rule "Retrieve new aggregated rate for two-party upload"
no-loop
salience 1000
when
  Transfer(properties["max_rate"] == null, source.getScheme() == "file", destination.getScheme() != "file", properties["local_file_host"] != null, $sourceHost:properties["local_file_host"].toString(), $destinationHost: destination.getHost())
  not AggregatedStreams(sourceHost == $sourceHost.toString(), destinationHost == $destinationHost)
then
  AggregatedRate $a = new AggregatedRate();
  $a.setSourceHost($sourceHost);
  $a.setDestinationHost($destinationHost);
  $a.setRate(resourceAllocationLog.getAggregatedRate($sourceHost, $destinationHost));
  insert($a);
  logger.debug("Retrieved aggregated rate: " + $a);
end

rule "Update existing aggregated streams"
no-loop
salience 1000
when
  ResourceAllocation($id: id, $sourceHost: source.getHost(), $destinationHost: destination.getHost())
  exists Transfer($id == $id, properties["max_streams"] == null)
  $a: AggregatedStreams(sourceHost == $sourceHost, destinationHost == $destinationHost)
then
  Integer $streams = resourceAllocationLog.getAggregatedTransferStreams($sourceHost, $destinationHost);
  modify($a) {
    setStreams($streams)
  }
  logger.debug("Updated cached aggregated streams: " + $a);
end

rule "Update existing aggregated rate"
no-loop
salience 1000
when
  ResourceAllocation($id: id, $sourceHost: source.getHost(), $destinationHost: destination.getHost())
  exists Transfer($id == $id, properties["max_rate"] == null)
  $a: AggregatedRate(sourceHost == $sourceHost, destinationHost == $destinationHost)
then
  Float $rate = resourceAllocationLog.getAggregatedRate($sourceHost, $destinationHost);
  modify($a) {
    setRate($rate)
  }
  logger.debug("Updated cached aggregated rate: " + $a);
end

rule "Update ResourceAllocation with transfer adjusted_streams."
when
  Transfer($id: id, $adjusted_streams:properties["adjusted_streams"] != null)
  $ra: ResourceAllocation(id == $id, transferStreams != Integer.parseInt($adjusted_streams.toString()), $sourceHost:source.getHost(), $destinationHost:destination.getHost())
  $as: AggregatedStreams(sourceHost == $sourceHost, destinationHost == $destinationHost)
then
  modify($ra) {
    setTransferStreams(Integer.parseInt($adjusted_streams.toString()))
  }
  logger.debug("Updated local resource allocation with streams=" + $adjusted_streams);
  resourceAllocationLog.updateResourceAllocation($ra);
  logger.debug("Updated resource allocation log with resource allocation=" + $ra.getId());
  int $newAggregatedStreams = resourceAllocationLog.getAggregatedTransferStreams($sourceHost, $destinationHost);
  modify($as) {
    setStreams($newAggregatedStreams)
  }
  logger.debug("Updated aggregated streams from resource allocation log: " + $newAggregatedStreams);
end

rule "Update ResourceAllocation with transfer adjusted_rate."
when
  Transfer($id: id, $adjusted_rate: properties["adjusted_rate"] != null)
  $ra: ResourceAllocation(id == $id, rate != Float.parseFloat($adjusted_rate.toString()), $sourceHost:source.getHost(), $destinationHost:destination.getHost())
  $ar: AggregatedRate(sourceHost == $sourceHost, destinationHost == $destinationHost)
then
  modify($ra) {
    setRate(Float.parseFloat($adjusted_rate.toString()))
  }
  logger.debug("Updated local resource allocation with rate=" + $adjusted_rate);
  resourceAllocationLog.updateResourceAllocation($ra);
  logger.debug("Updated resource allocation log with resource allocation=" + $ra.getId());
  float $newAggregatedRate = resourceAllocationLog.getAggregatedRate($sourceHost, $destinationHost);
  modify($ar) {
    setRate($newAggregatedRate)
  }
  logger.debug("Updated aggregated rate from resource allocation log: " + $newAggregatedRate);
end

rule "Set default max streams on transfer"
when
  $t: Transfer(properties["max_streams"] == null, properties["adjusted_streams"] == null)
then
  modify($t) {
    setProperty("max_streams", default_max_streams.toString());
  }
  logger.info("Set default max_streams=" + default_max_streams + " on transfer " + $t);
end

rule "Set default max rate on transfer"
when
  $t: Transfer(properties["max_rate"] == null, properties["adjusted_rate"] == null)
then
  modify($t) {
    setProperty("max_rate", default_max_rate.toString());
  }
  logger.info("Set default max_rate=" + default_max_rate + " on transfer " + $t);
end

rule "Assign resource allocation to the number of max_streams assigned to the transfer."
when
  $t:Transfer($id:id, $max_streams: properties["max_streams"] != null, properties["adjusted_streams"] == null)
  $ra: ResourceAllocation(id == $id, transferStreams != Integer.parseInt($max_streams.toString()), $sourceHost:source.getHost(), $destinationHost:destination.getHost())
  $aggregatedStreams: AggregatedStreams(sourceHost == $sourceHost, destinationHost == $destinationHost)
then
  modify($ra) {
    setTransferStreams(Integer.parseInt($max_streams.toString()))
  }
  logger.debug("Allocated max_streams=" + $max_streams + " for transfer " + $t);
  resourceAllocationLog.updateResourceAllocation($ra);
  logger.debug("Updated resource allocation record " + $ra);
  int $newStreams = resourceAllocationLog.getAggregatedTransferStreams($sourceHost, $destinationHost);
  modify($aggregatedStreams) {
    setStreams($newStreams);
  }
  logger.debug("Updated cached aggregated streams to " + $newStreams);
end

rule "Assign resource allocation to the number of max_rate assigned to the transfer."
when
  $t:Transfer($id:id, $max_rate: properties["max_rate"] != null, properties["adjusted_rate"] == null)
  $ra: ResourceAllocation(id == $id, rate != Float.parseFloat($max_rate.toString()), $sourceHost:source.getHost(), $destinationHost:destination.getHost())
  $aggregatedRate: AggregatedRate(sourceHost == $sourceHost, destinationHost == $destinationHost)
then
  modify($ra) {
    setRate(Float.parseFloat($max_rate.toString()))
  }
  logger.debug("Allocated max_rate=" + $max_rate + " for transfer " + $t);
  resourceAllocationLog.updateResourceAllocation($ra);
  logger.debug("Updated resource allocation record " + $ra);
  float $newRate = resourceAllocationLog.getAggregatedRate($sourceHost, $destinationHost);
  modify($aggregatedRate) {
    setRate($newRate);
  }
  logger.debug("Updated cached aggregated rate to " + $newRate);
end

rule "Set transfer STATUS to START"
when
  $t: Transfer(properties["STATUS"] == null)
then
  modify($t) {
    setProperty("STATUS", "START")
  }
  logger.debug("Set new transfer status to START");
  transferStatisticsLog.recordNewTransfer($t);
end

rule "Remove completed transfer."
when
  $t: Transfer(properties["STATUS"] == "COMPLETED")
then
  retract($t);
  logger.info("Removed completed transfer " + $t);
  transferStatisticsLog.recordTransferCompleted($t);
  logger.debug("Recorded completed transfer in the transfer statistics log: " + $t);
end

rule "Remove failed transfer."
when
  $t: Transfer(properties["STATUS"] == "FAILED")
then
  retract($t);
  logger.info("Removed failed transfer " + $t);
  transferStatisticsLog.recordTransferFailed($t);
  logger.debug("Recorded failed transfer in the transfer statistics log: " + $t);
end

rule "Remove resource allocation when transfer does not exist."
when
  $ra: ResourceAllocation($id:id, $sourceHost:source.getHost(), $destinationHost:destination.getHost())
  not Transfer(id == $id)
  $as: AggregatedStreams(sourceHost == $sourceHost, destinationHost == $destinationHost)
  $ar: AggregatedRate(sourceHost == $sourceHost, destinationHost == $destinationHost)
then
  resourceAllocationLog.removeResourceAllocation($ra.getId());
  retract($ra);
  logger.debug("Removed resource allocation " + $ra);
  Integer $streams = resourceAllocationLog.getAggregatedTransferStreams($sourceHost, $destinationHost);
  modify($as) {
    setStreams($streams)
  }
  logger.debug("Updated cached aggregate streams: " + $streams);
  Float $rate = resourceAllocationLog.getAggregatedRate($sourceHost, $destinationHost);
  modify($ar) {
    setRate($rate);
  }
  logger.debug("Updated cached aggregate rate: " + $rate);
end

rule "Enforce max streams threshold"
when
  ResourceAllocation($id:id, $allocated_streams:transferStreams, $sourceHost:source.getHost(), $destinationHost:destination.getHost())
  $t: Transfer(properties["adjusted_streams"] == null, properties["max_streams"] != null, Integer.parseInt(properties["max_streams"].toString()) == $allocated_streams, Integer.parseInt(properties["max_streams"].toString()) > 1)
  AggregatedStreams(sourceHost == $sourceHost, destinationHost == $destinationHost, $aggregated_streams:streams)
  $max_streams: Integer(this < $aggregated_streams) from maxParallelStreams.get(new ResourceExpressionPair($sourceHost, $destinationHost))
then
  Integer $new_streams = $max_streams - ($aggregated_streams - $allocated_streams);
  modify($t) {
    setProperty("max_streams", $new_streams.toString());
  }
  logger.debug("Set max_streams to " + $new_streams + " on transfer " + $t + ": aggregated streams violated threshold.");
end

rule "Enforce max rate threshold"
when
  ResourceAllocation($id:id, $allocated_rate:rate, $sourceHost:source.getHost(), $destinationHost:destination.getHost())
  $t: Transfer(properties["adjusted_rate"] == null, properties["max_rate"] != null, Float.parseFloat(properties["max_rate"].toString()) == $allocated_rate, Float.parseFloat(properties["max_rate"].toString()) > 1.0f)
  AggregatedRate(sourceHost == $sourceHost, destinationHost == $destinationHost, $aggregated_rate:rate)
  $max_rate: Float(this < $aggregated_rate) from maxBandwidth.get(new ResourceExpressionPair($sourceHost, $destinationHost))
then
  Float $new_rate = $max_rate - ($aggregated_rate - $allocated_rate);
  modify($t) {
    setProperty("max_rate", $new_rate.toString());
  }
  logger.debug("Set max_rate to " + $new_rate + " on transfer " + $t + ": aggregated rate violated threshold.");
end

rule "Ensure transfer has at least 1 parallel stream"
when
  $t: Transfer(properties["max_streams"] != null, Integer.parseInt(properties["max_streams"].toString()) < 1)
then
  modify($t) {
    setProperty("max_streams", "1")
  }
  logger.debug("Assigned transfer " + $t + " the minimum max_streams=1");
end

rule "Ensure transfer has at least 1 MB rate"
when
  $t: Transfer(properties["max_rate"] != null, Float.parseFloat(properties["max_rate"].toString()) < 1.0f)
then
  modify($t) {
    setProperty("max_rate", "1.0");
  }
  logger.debug("Assigned transfer " + $t + " the minimum max_rate=1");
end
