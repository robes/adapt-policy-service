package edu.isi.policy.test;

import edu.isi.policy.entity.Transfer;
import edu.isi.policy.util.TransferList;
import edu.isi.policy.util.ResourceExpressionPairMap;
import edu.isi.policy.entity.ResourceExpressionPair;
import edu.isi.policy.util.ResourceExpressionList;

import edu.isi.rls.client.SimpleRLSClient;
import java.net.URI;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.log4j.Logger;
import org.ietf.jgss.GSSCredential;

global Logger logger;
global GSSCredential credential;
global ResourceExpressionList resourcePreferences;

rule "Add replica map to memory"
salience 1000
when
  not Map(this["_type_"] == "replica")
then
  logger.debug("Adding replica map to memory");
  Map $m = new ConcurrentHashMap();
  $m.put("_type_", "replica");
  insert($m);
end

rule "Add transfers to working memory from TransferList."
salience 1000 # Do this first so we can easily modify transfers in knowledge
when
  $tl: TransferList(size() > 0)
  $t: Transfer() from $tl
then
  insert($t);
  logger.debug("Added transfer " + $t + " to knowledge.");
end

# Create RLS client connection for RLS URLs in the Transfer list
rule "Create RLS connection for RLS source transfer in memory"
when
  $t: Transfer($source:source, source.getScheme() == "rls")
  not SimpleRLSClient(getHost() == $source.getHost())
then
  logger.debug("Establishing new connection to RLS host " + $source.getHost());
  SimpleRLSClient $rls = new SimpleRLSClient($source.getHost(), credential);
  insert($rls);
end

# Remove any RLS connections that don't have an RLS URL left to process
rule "Remove unneeded RLS connections and replica cache"
no-loop
when
  $rls: SimpleRLSClient($host:getHost())
  not Transfer(source.toString().startsWith("rls://" + $host + "/"))
  $replicas: Map(this["_type_"] == "replica")
then
  logger.debug("Removing RLS client for unneeded connection to " + $host);
  retract($rls);
  for(Object $source:$replicas.keySet()) {
    if(((String)$source).startsWith("rls://" + $host + "/")) {
      logger.debug("Cleaning replica cache for " + $source);
      modify($replicas) {
        remove($source)
      }
    }
  } 
end

# Load resources for a pending RLS source
rule "Load resources for a pending RLS source"
when
  $t: Transfer($source: source, $lfn: source.getPath().substring(1), source.getScheme() == "rls")
  $rls: SimpleRLSClient($host:getHost(), getHost() == $source.getHost())
  $replicas: Map(this["_type_"] == "replica", this[$source.toString()] == null)
then
  logger.debug("Loading PFN list for " + $source);
  List urls = $rls.queryCatalogByLogicalName($lfn);
  modify($replicas) {
    put($source.toString(), urls)
  }
  logger.debug($source + ":" + urls);
end
  
rule "Select replica using resource preferences"
when
  $t: Transfer($source: source, source.getScheme() == "rls")
  $rls: SimpleRLSClient($host:getHost(), getHost() == $source.getHost())
  $replicas: Map(this["_type_"] == "replica", this[$source.toString()] != null)
  $rp: String() from resourcePreferences
  $resource: String(this matches $rp) from $replicas[$source.toString()]
then
  logger.debug("Using preferred resource " + $resource + " for " + $source);
  modify($t) {
    setSource(new URI($resource))
  }
end
   
rule "Use the first replica on the list for RLS requests"
salience -1000 # use this as a last resort for RLS source URLs that haven't been processed
when
  $t: Transfer($source: source, source.getScheme() == "rls")
  $rls: SimpleRLSClient($host:getHost(), getHost() == $source.getHost())
  $replicas: Map(this["_type_"] == "replica", this[$source.toString()] != null)
then
  List urls = (List)$replicas.get($source.toString());
  if(urls.size() > 0) {
    logger.debug("Setting transfer source to " + urls.get(0));
    modify($t) {
      setSource(new URI(urls.get(0).toString()))
    }
  }
end

